// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Market {
  id          String         @id @default(cuid())
  name        String
  description String
  image       String
  location    String
  prevDate    DateTime
  nextDate    DateTime
  vendors     Vendor[]
  images      MarketImages[]
}

model MarketImages {
  id       String @id @default(cuid())
  url      String
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId String
}

model MarketSuggestions {
  id          String @id @default(cuid())
  name        String
  description String
}

model Vendor {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  marketId    String
  market      Market    @relation(fields: [marketId], references: [id], onDelete: Cascade)
  products    Product[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  image       String?
  price       Float
  vendorId    String
  tags        Tags[]
  vendor      Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

enum Tags {
  FRUITS
  VEGETABLES
  DAIRY
  MEAT
  SEAFOOD
  BAKERY
  BEVERAGES
  SNACKS
  OTHER
}
