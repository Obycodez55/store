generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  shopName      String?   // Added shop name field
  password      String
  image         String?
  phone         String    @unique // Now required
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  vendorId      String?   @unique
  accounts      Account[]
  sessions      Session[]
  vendor        Vendor?   @relation(fields: [vendorId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Market {
  id          String         @id @default(cuid())
  name        String
  description String
  image       String
  location    String
  prevDate    DateTime?      
  nextDate    DateTime?
  interval    String         @default("DAILY")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  images      MarketImages[]
  vendors     Vendor[]
}

model MarketImages {
  id        String   @id @default(cuid())
  url       String
  marketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  market    Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)
}

model MarketSuggestions {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vendor {
  id        String    @id @default(cuid())
  name      String
  marketId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String?
  phone     String
  website   String?
  goodsSold String[]
  products  Product[]
  user      User?
  market    Market    @relation(fields: [marketId], references: [id])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  image       String?       // This will store the primary/first image
  vendorId    String
  tags        Tags[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  vendor      Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Tags {
  FRUITS
  VEGETABLES
  DAIRY
  MEAT
  SEAFOOD
  BAKERY
  BEVERAGES
  SNACKS
  OTHER
}
